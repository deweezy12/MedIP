// MDL v1 utf8
mevislabVersion = 3.6.1.9
network  {
  watchlist = ""
}
module LocalImage {
  internal  {
    frame = "553 1037 192 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "603 481 488 148"
        sizeHint = "488 148"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = LocalImage
    name = $(DemoDataPath)/Tumor1_Head_t1.small.dcm
    autoLoad = TRUE
  }
}
module GaussHessian {
  internal  {
    frame = "857 917 160 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "2135 422 194 262"
        sizeHint = "194 262"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = GaussHessian
    sigma = 1
    reportSigmaTooSmallAsWarning = TRUE
    unit = voxel
    calc2D = FALSE
    calcLaplacian = TRUE
    applyScaleNormalization = FALSE
    autoUpdate = FALSE
  }
}
module PythonArithmetic {
  internal  {
    frame = "937 721 128 64"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "882 1037 1233 810"
        sizeHint = "604 568"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = RegionGrowing
    calculateOutputSubImage = "*from numpy import linalg as LA
import numpy

ext_x, ext_y, ext_z, ext_c, ext_t, ext_u = in0.extent()

# 1. Implement region growing and use the blob detection results to segment the tumor

# Initialize seed point for tumor segmentation
# This point is chosen within the tumor area
# Format: X, Y, Z coordinates
#seed_point = (35, 25, 33)
seed_point = (35, 25, 33)

# Get the 3D image data
volume_data = in0.squeeze()

# Function to set a value at specific XYZ position in the mask
# Note: numpy arrays are accessed in ZYX order
def mark_position(mask, position, value):
    mask[position[2], position[1], position[0]] = value

# Function to retrieve image intensity at given position
def get_intensity(volume, position):
    return volume[position[2], position[1], position[0]]

# Function to check if position is within image boundaries
def is_outside_volume(volume, position):
    pos_x, pos_y, pos_z = position
    dim_z, dim_y, dim_x = volume.shape
    if pos_x < 0 or pos_x >= dim_x:
        return True
    if pos_y < 0 or pos_y >= dim_y:
        return True
    if pos_z < 0 or pos_z >= dim_z:
        return True
    return False

# Create empty mask for segmentation results
segmentation_mask = numpy.zeros_like(volume_data)

# Mark the initial seed point
mark_position(segmentation_mask, seed_point, 1)

# Create a set to store active seed points
active_seeds = set()
active_seeds.add(seed_point)

# Function to get 6-connected neighbors in 3D space
def get_adjacent_voxels(position):
    x, y, z = position
    return [
        (x-1, y, z),    # left
        (x+1, y, z),    # right
        (x, y-1, z),    # anterior
        (x, y+1, z),    # posterior
        (x, y, z-1),    # superior
        (x, y, z+1)     # inferior
    ]

# Intensity similarity criterion
def is_intensity_similar(val1, val2):
    # Threshold of 1.1 for intensity difference
    return abs(val1 - val2) < 0.8

# Run region growing algorithm
iteration = 0
while active_seeds:
    iteration += 1
    if iteration % 10 == 0:
        print(f"Processing iteration {iteration}, {len(active_seeds)} seeds active")
    
    # New seeds discovered in this iteration
    candidate_seeds = set()
    
    # Process each current seed
    for current_seed in active_seeds:
        # Check all neighbors
        adjacent_voxels = get_adjacent_voxels(current_seed)
        
        for neighbor in adjacent_voxels:
            # Skip if outside volume
            if is_outside_volume(volume_data, neighbor):
                continue
                
            # Skip if already segmented
            if get_intensity(segmentation_mask, neighbor) == 1:
                continue
                
            # Check intensity similarity
            if is_intensity_similar(get_intensity(volume_data, neighbor), 
                                   get_intensity(volume_data, current_seed)):
                # Mark as part of tumor
                mark_position(segmentation_mask, neighbor, 1)
                # Add to new seeds
                candidate_seeds.add(neighbor)
    
    # Update active seeds for next iteration
    active_seeds = candidate_seeds
    
    # Break if no new seeds
    if not active_seeds:
        print("Region growing complete: no new voxels to add")

# Output the segmentation result
out = segmentation_mask*"
    calculateInputSubImageBox = ""
    calculateOutputImageProperties = "extent = inImage0.imageExtent()
outImage.setPageExtent(extent[0],extent[1],extent[2],extent[3],1,extent[5] )"
    numberOfInputs = 1
    doubleConstant0 = 0
    doubleConstant1 = 0
    doubleConstant2 = 0
    doubleConstant3 = 0
    doubleConstant4 = 0
    doubleConstant5 = 0
    doubleConstantName0 = ""
    doubleConstantName1 = ""
    doubleConstantName2 = ""
    doubleConstantName3 = ""
    doubleConstantName4 = ""
    doubleConstantName5 = ""
    intConstant0 = 0
    intConstant1 = 0
    intConstant2 = 0
    intConstant3 = 0
    intConstant4 = 0
    intConstant5 = 0
    intConstantName0 = ""
    intConstantName1 = ""
    intConstantName2 = ""
    intConstantName3 = ""
    intConstantName4 = ""
    intConstantName5 = ""
    setMinMaxValues = FALSE
    minVoxelValue = 0
    maxVoxelValue = 0
    setDataType = TRUE
    dataType = int16
    inputDataType0 = "input type"
    inputDataType1 = "output type"
    inputDataType2 = "output type"
    inputDataType3 = "output type"
    inputDataType4 = "output type"
    inputHandling0 = AllowAny
    inputHandling1 = AllowAny
    inputHandling2 = AllowAny
    inputHandling3 = AllowAny
    inputHandling4 = AllowAny
  }
}
module View2D {
  internal  {
    frame = "613 297 120 64"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "54 335 1156 898"
        sizeHint = "400 400"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = DetectedTumor
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    view2DExtensionsOn = TRUE
    startSlice = 22
    numSlices = 1
    numXSlices = 1
    sliceStep = 1
    slab = 1
    blendMode = BLEND_REPLACE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_NEAREST
    standardKeys = TRUE
    cineMode = CINE_ZT
    cineDirection = CINE_FORWARD
    cineRepeat = CINE_ONCE
    cineSpeed = 0.1
    cineAlwaysReset = TRUE
    snapToCenter = TRUE
    zoomMode = VIEW2D_AUTO_ZOOM
    unzoomOnImageChange = FALSE
    sliceZoom = 1
    sliceZoomSynced = 1
    baseColor = "1 1 1"
    margin = "2 2"
    sliceOrigin = "0 0"
    useShaders = TRUE
    useManagedInteraction = FALSE
    lutCenter = 215.962493896484
    lutWidth = 415.606292724609
    annotationOn = TRUE
    annotationMode = ANNO_MODE_AUTO
    annotationSizeMode = ANNO_SHOW_DETAILED
    annotationCol = "0.899999976158142 0.899999976158142 0.899999976158142"
    annotationFontSize = ANNO_SIZE_AUTO
    annoCoords = Voxel
    annoCTValue = AsIs
    borderOn = FALSE
    borderColor = "0.899999976158142 0.899999976158142 0.899999976158142"
    valueHighPrecision = TRUE
    showColorChannelValues = FALSE
    colorChannelSeparator = " / "
    maxPrecision = 4
    enableSlicing = TRUE
    useRelativeLUTIfNoInputImage = TRUE
  }
}
module SoView2DOverlay {
  internal  {
    frame = "725 445 136 56"
    moduleGroupName = ""
    windows  {
      window _automatic {
        geometry = "786 409 355 440"
        sizeHint = "355 440"
        wasOpen = no
      }
      window _default {
        geometry = "2619 301 539 553"
        sizeHint = "539 553"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = SoView2DOverlay1
    interactionProviderID = ""
    drawingOn = TRUE
    editingOn = TRUE
    fixZOn = TRUE
    color = "1 1 1"
    selectionTolerance = 4
    needsValidVoxel = TRUE
    button1 = IGNORED
    button2 = IGNORED
    button3 = IGNORED
    shift = IGNORED
    control = IGNORED
    alt = IGNORED
    wantsAllEvents = TRUE
    wantsKeyEvents = TRUE
    wantsMouseWheelEvents = FALSE
    setEventHandled = FALSE
    ignoreHandledEvents = FALSE
    createNewMode = FALSE
    renderOnSlab = TRUE
    clipToSlice = TRUE
    cursorShape = DEFAULT_CURSOR
    overlayName = ""
    cacheTextures = FALSE
    blendMode = BLEND_BLEND
    overwriteCurrentTimePoint = TRUE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_LINEAR
    inheritFilterMode = TRUE
    lutPrecision = VIEW2D_LUT_AUTO
    alphaFactor = 0.60000002
    baseColor = "1 0 1"
    useWorldCoords = TRUE
    applyLut = TRUE
    isCheckerTiling = FALSE
    checkerTileSize = 2
    areCheckerTilesInverted = FALSE
  }
}
module MinMaxScan {
  internal  {
    frame = "933 613 136 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "3085 314 468 305"
        sizeHint = "450 305"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = MinMaxScan
    updateMode = AutoUpdate
    typeSelect = "Proposed Data Type"
    preferredIntType = PreferUnsigned
  }
}
module Info {
  internal  {
    frame = "813 713 88 80"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "1582 907 677 421"
        sizeHint = "677 421"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = Info
  }
}
module ImageClear {
  internal  {
    frame = "937 829 128 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "868 492 185 157"
        sizeHint = "185 157"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = ImageClear
    autoUpdate = FALSE
  }
}
module PythonArithmetic {
  internal  {
    frame = "933 509 136 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "377 116 1524 1108"
        sizeHint = "604 568"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = MeasureExtent
    calculateOutputSubImage = "*from numpy import linalg as LA
import numpy

ext_x, ext_y, ext_z, ext_c, ext_t, ext_u = in0.extent()

# 2. Add code to measure the extent of the segmentation

# Initialize variables for center of mass calculation
total_points = 0
centroid = numpy.array([0.0, 0.0, 0.0])
segmented_points = []

# Create a copy of the input for output
out = in0.copy()

# Iterate through all dimensions to find segmented voxels
for u in range(ext_u):
    for t in range(ext_t):
        for c in range(ext_c):
            for z in range(ext_z):
                for y in range(ext_y):
                    for x in range(ext_x):
                        voxel_value = in0[u, t, c, z, y, x]
                        
                        # Check if voxel is part of the segmentation
                        if voxel_value > 0:
                            # Accumulate for centroid calculation
                            total_points += 1
                            centroid[0] += x
                            centroid[1] += y
                            centroid[2] += z
                            
                            # Store coordinates of segmented voxels
                            segmented_points.append([x, y, z])
                            
                            # IMPORTANT: Keep segmented voxels visible in output
                            # This is what makes the segmentation show up as orange
                            out[u, t, c, z, y, x] = voxel_value
                        else:
                            # Set non-segmented voxels to 0 (invisible)
                            out[u, t, c, z, y, x] = 0

# Calculate centroid (center of mass)
if total_points > 0:
    centroid = centroid / total_points

    # Convert list to numpy array for matrix operations
    segmented_array = numpy.array(segmented_points)
    
    # Center the data by subtracting the centroid
    centered_data = segmented_array - centroid
    
    # Calculate the covariance matrix to find principal axes
    # Using matrix multiplication for covariance computation
    cov_matrix = numpy.dot(centered_data.T, centered_data) / total_points
    
    # Calculate eigenvalues and eigenvectors
    eig_vals, eig_vecs = LA.eigh(cov_matrix)
    
    # Sort by eigenvalue in descending order (largest first)
    idx = eig_vals.argsort()[::-1]
    eig_vals = eig_vals[idx]
    eig_vecs = eig_vecs[:, idx]
    
    # Transform points to the principal component space
    transformed_points = numpy.dot(centered_data, eig_vecs)
    
    # Calculate extents along principal axes
    x_min, y_min, z_min = numpy.min(transformed_points, axis=0)
    x_max, y_max, z_max = numpy.max(transformed_points, axis=0)
    
    # Calculate dimensions along principal axes in mm
    # Assuming voxel size of 2.714 mm (same as original)
    voxel_size = 2.714
    
    # Output results
    print("Segmentation analysis results:")
    print(f"Centroid position: ({centroid[0]:.2f}, {centroid[1]:.2f}, {centroid[2]:.2f})")
    print(f"Principal axis 1 extent: {(x_max - x_min) * voxel_size:.2f} mm")
    print(f"Principal axis 2 extent: {(y_max - y_min) * voxel_size:.2f} mm")
    print(f"Principal axis 3 extent: {(z_max - z_min) * voxel_size:.2f} mm")
    print(f"Total segmented voxels: {total_points}")
    
    # Optional: Calculate volume in cubic mm
    volume = total_points * (voxel_size ** 3)
    print(f"Estimated volume: {volume:.2f} mm³")
else:
    print("No segmented voxels found.")*"
    calculateInputSubImageBox = ""
    calculateOutputImageProperties = "extent = inImage0.imageExtent()
outImage.setPageExtent(extent[0],extent[1],extent[2],extent[3],1,extent[5] )"
    numberOfInputs = 1
    doubleConstant0 = 0
    doubleConstant1 = 0
    doubleConstant2 = 0
    doubleConstant3 = 0
    doubleConstant4 = 0
    doubleConstant5 = 0
    doubleConstantName0 = ""
    doubleConstantName1 = ""
    doubleConstantName2 = ""
    doubleConstantName3 = ""
    doubleConstantName4 = ""
    doubleConstantName5 = ""
    intConstant0 = 0
    intConstant1 = 0
    intConstant2 = 0
    intConstant3 = 0
    intConstant4 = 0
    intConstant5 = 0
    intConstantName0 = ""
    intConstantName1 = ""
    intConstantName2 = ""
    intConstantName3 = ""
    intConstantName4 = ""
    intConstantName5 = ""
    setMinMaxValues = FALSE
    minVoxelValue = 0
    maxVoxelValue = 0
    setDataType = TRUE
    dataType = float
    inputDataType0 = "input type"
    inputDataType1 = "output type"
    inputDataType2 = "output type"
    inputDataType3 = "output type"
    inputDataType4 = "output type"
    inputHandling0 = AllowAny
    inputHandling1 = AllowAny
    inputHandling2 = AllowAny
    inputHandling3 = AllowAny
    inputHandling4 = AllowAny
  }
}
module MinMaxScan {
  internal  {
    frame = "929 397 144 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "3085 314 468 305"
        sizeHint = "450 305"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = MinMaxScan1
    updateMode = AutoUpdate
    typeSelect = "Proposed Data Type"
    preferredIntType = PreferUnsigned
  }
}
module SoGVRVolumeRenderer {
  internal  {
    frame = "1141 357 168 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "1622 349 490 660"
        sizeHint = "490 660"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = SoGVRVolumeRenderer
    renderCaching = AUTO
    boundingBoxCaching = AUTO
    renderCulling = AUTO
    pickCulling = AUTO
    on = TRUE
    autoLoad = TRUE
    interactiveQuality = 0.1
    staticQuality = 1
    interactiveSamplingRate = 1
    staticSamplingRate = 1
    blendMode = Blend
    octreeNodeSize = NODE_SIZE_32
    octreeParentComputationMethod = Rank
    octreeParentComputationRank = 4
    currentTimePoint = 0
    maxTimePoint = 0
    force8bit = FALSE
    filterVolumeData = FilterLinear
    filterLut = TRUE
    subVolumeStartX = 0
    subVolumeStartY = 0
    subVolumeStartZ = 0
    subVolumeEndX = 94
    subVolumeEndY = 94
    subVolumeEndZ = 59
    zbuffer = TRUE
    permitClipping = TRUE
    drawOnPlanes = TRUE
    sizeOutputX = 94
    sizeOutputY = 94
    sizeOutputZ = 59
    incrementalUpdate = TRUE
    highQualityStaticUpdate = FALSE
    staticRenderingAfterInteractionOnly = FALSE
    adaptQualityToWindowSize = TRUE
    rayCastTextureStorage = RayCastTextureStorage_Auto
    renderMode = Direct
    greyCenter = 0.5
    greyWidth = 0.5
    greyInvert = FALSE
    alphaCenter = 0.5
    alphaWidth = 0.5
    alphaInvert = FALSE
    colorFactor = "1 0.333333343267441 1"
    alphaFactor = 1
    enhancementAlphaMix = 0.25
    boundaryEnhancement = FALSE
    boundaryEnhancementFactor = 1
    boundaryEnhancementExponent = 1
    boundaryEnhancementGradientBias = 0
    silhouetteEnhancement = FALSE
    silhouetteEnhancementExponent = 1
    silhouetteEnhancementFactor = 1
    toneShading = FALSE
    toneShadingWarmColor = "0.674509823322296 0.533333361148834 0.141176477074623"
    toneShadingColdColor = "0 0 0.400000005960464"
    toneShadingWarmDiffuse = 0.60000002
    toneShadingColdDiffuse = 0.2
    toneShadingAngle = 45
    materialAmbient = 0.60000002
    materialDiffuse = 1
    materialSpecular = 1
    materialSpecularity = 32
    reduceLightingOnLowGradientMagnitude = FALSE
    light1Enabled = TRUE
    light1DiffuseIntensity = 1
    light1SpecularIntensity = 1
    light1Color = "1 1 1"
    light1PolarPhi = 0
    light1PolarRho = 0
    light2Enabled = FALSE
    light2DiffuseIntensity = 1
    light2SpecularIntensity = 1
    light2Color = "1 1 1"
    light2PolarPhi = 45
    light2PolarRho = 45
    light3Enabled = FALSE
    light3DiffuseIntensity = 1
    light3SpecularIntensity = 1
    light3Color = "1 1 1"
    light3PolarPhi = -45
    light3PolarRho = 0
    gradientQuality = GradientQualityAutomatic
    selectionAlphaThreshold = 0.2
    selectionActive = FALSE
    useWorldCoords = TRUE
  }
}
module SoExaminerViewer {
  internal  {
    frame = "1229 229 136 56"
    moduleGroupName = ""
    windows  {
      window _viewer {
        geometry = "433 346 400 400"
        sizeHint = "400 400"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = SoExaminerViewer
    renderCaching = AUTO
    boundingBoxCaching = AUTO
    renderCulling = AUTO
    pickCulling = AUTO
    border = FALSE
    background = "0 0 0"
    transparency = BLEND
    antialiasing = FALSE
    antialiasingNumPasses = 1
    useSampleBuffers = FALSE
    numSamples = 8
    grabKeyFocus = TRUE
    enableKeyCommands = TRUE
    snapshotFormat = SNAPSHOT_RGB
    outputAviFile = ""
    autoRedrawWhenRecording = TRUE
    frameRate = 7
    frameRateAvi = 15
    outputSnapshotFile = none
    outputSnapshotFileWritten = none
    autoIncreaseFile = TRUE
    showSnapshotWithShell = FALSE
    snapCount = 0
    inputDevicesList = ""
    headlight = TRUE
    decoration = TRUE
    popupMenuEnabled = FALSE
    viewing = TRUE
    autoClipping = TRUE
    drawStyle = VIEW_AS_IS
    interactiveDrawStyle = VIEW_LOW_COMPLEXITY
    viewAllFlag = FALSE
    initialCameraOrientation = CAMERA_KEEP_AS_IS
    applyCameraOrientation = CAMERA_KEEP_AS_IS
    cameraType = CAMERA_PERSPECTIVE
    autoApplyUserSettingOrientation = FALSE
    userSettingOrientation = "0 0 1 0"
    automaticViewAll = FALSE
    storeCurrentState = TRUE
    saveCamera = TRUE
    cursor = TRUE
    isCameraStored = TRUE
    perspective = TRUE
    stereoViewing = FALSE
    stereoOffset = 3
    height = 0.78539819
    position = "312.075408935547 -51.8557548522949 -175.331527709961"
    orientation = "0.512811958789825 0.812106549739838 0.278400421142578 2.35683131217957"
    nearDistance = 210.48636
    farDistance = 498.79993
    focalDistance = 363.00897
    forceRedrawOnInteraction = FALSE
    button1events = TO_VIEWER
    button2events = TO_VIEWER
    button3events = TO_VIEWER
    keyEvents = TO_VIEWER
    animationEnabled = FALSE
    feedback = FALSE
    feedbackSize = 32
    mouseInteraction = ""
    rotationAxis = "0 1 0"
    rotationAngle = 360
    rotationSteps = 80
    recordRotation = TRUE
    wheelZoomEnabled = TRUE
    wheelRotationEnabled = TRUE
  }
}
connections  {
  GaussHessian.input0 = LocalImage.outImage
  RegionGrowing.input0 = ImageClear.output0
  DetectedTumor.inImage = LocalImage.outImage
  DetectedTumor.inInvPreLUT = SoView2DOverlay1.self
  SoView2DOverlay1.image = MinMaxScan1.output0
  MinMaxScan.input0 = RegionGrowing.output0
  Info.input0 = GaussHessian.output0
  ImageClear.input0 = GaussHessian.output0
  MeasureExtent.input0 = MinMaxScan.output0
  MinMaxScan1.input0 = MeasureExtent.output0
  SoGVRVolumeRenderer.image = MinMaxScan1.output0
  SoExaminerViewer.children = SoGVRVolumeRenderer.self
}
networkModel = ""
