// MDL v1 utf8
mevislabVersion = 3.6.1.9
network  {
  watchlist = ""
}
module LocalImage {
  internal  {
    frame = "625 437 128 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "603 481 488 148"
        sizeHint = "488 148"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = LocalImage
    name = $(DemoDataPath)/Tumor1_Head_t1.small.dcm
    autoLoad = TRUE
  }
}
module GaussHessian {
  internal  {
    frame = "633 325 144 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "291 534 239 313"
        sizeHint = "239 313"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = GaussHessian
    sigma = 2
    reportSigmaTooSmallAsWarning = TRUE
    unit = voxel
    calc2D = FALSE
    calcLaplacian = FALSE
    applyScaleNormalization = FALSE
    autoUpdate = FALSE
  }
}
module View3D {
  internal  {
    frame = "793 85 144 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "756 199 1103 719"
        sizeHint = "1103 719"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = View3D
    autoViewAll = TRUE
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    lutType = Ramp
    rendererType = Slicer
    currentTimePoint = 0
    staticSamplingRate = 1
    quality = 1
    filterVolumeData = FilterNearest
    lutEditorColorPoints = "[ 0 0 0 0, 4095 1 1 1 ]"
    lutEditorAlphaPoints = "[ 0 0, 4095 1 ]"
    lutEditorRelativeLut = FALSE
    lutEditorColorInterpolation = InterpolateRGB
    lutEditorAlphaFactor = 1
    orientationProjectionType = PERSPECTIVE
    orientationLocation = LOWER_RIGHT
    orientationOn = TRUE
    orientationModel = CUBE
    greyCenter = 0.717500150203705
    greyWidth = 1
    alphaFactor = 1
    colorFactor = "1 1 1"
    camType = TRUE
    camPosition = "977.748291015625 265.151245117188 352.060455322266"
    camOrientation = "0.155624717473984 -0.977022528648376 -0.145629361271858 5.03627777099609"
    initialCameraOrientation = CAMERA_KEEP_AS_IS
    camFar = 1228.2067
    camNear = 928.86224
    camFocal = 1078.3856
    camHeight = 0.78539801
    decoration = FALSE
    annotations = TRUE
    background = FALSE
    mode = VolumeRendering
    interactiveQuality = Medium
  }
  internalFields  {
    renderer.gradientQuality = GradientQualityAutomatic
    renderer.enhancementAlphaMix = 0.25
    renderer.boundaryEnhancement = FALSE
    renderer.boundaryEnhancementFactor = 1
    renderer.boundaryEnhancementExponent = 1
    renderer.boundaryEnhancementGradientBias = 0
    renderer.silhouetteEnhancement = FALSE
    renderer.silhouetteEnhancementExponent = 1
    renderer.silhouetteEnhancementFactor = 1
    renderer.toneShading = FALSE
    renderer.toneShadingWarmColor = "0.67451000213623 0.533333003520966 0.141176000237465"
    renderer.toneShadingColdColor = "0 0 0.400000005960464"
    renderer.toneShadingWarmDiffuse = 0.60000002
    renderer.toneShadingColdDiffuse = 0.2
    renderer.toneShadingAngle = 45
    renderer.materialAmbient = 0.60000002
    renderer.materialDiffuse = 1
    renderer.materialSpecular = 1
    renderer.materialSpecularity = 32
    renderer.light1Enabled = TRUE
    renderer.light1DiffuseIntensity = 1
    renderer.light1SpecularIntensity = 1
    renderer.light1Color = "1 1 1"
    renderer.light1PolarPhi = 45
    renderer.light1PolarRho = 0
    renderer.light2Enabled = FALSE
    renderer.light2DiffuseIntensity = 1
    renderer.light2SpecularIntensity = 1
    renderer.light2Color = "1 1 1"
    renderer.light2PolarPhi = 0
    renderer.light2PolarRho = 0
    renderer.light3Enabled = FALSE
    renderer.light3DiffuseIntensity = 1
    renderer.light3SpecularIntensity = 1
    renderer.light3Color = "1 1 1"
    renderer.light3PolarPhi = -45
    renderer.light3PolarRho = 0
    renderer.sizeOutputX = 94
    renderer.sizeOutputY = 94
    renderer.sizeOutputZ = 59
    renderer.subVolumeStartX = 0
    renderer.subVolumeStartY = 0
    renderer.subVolumeStartZ = 0
    renderer.subVolumeEndX = 94
    renderer.subVolumeEndY = 94
    renderer.subVolumeEndZ = 59
    clip.hideGeometry = FALSE
    clip.on = FALSE
    clip.left = FALSE
    clip.right = FALSE
    clip.top = FALSE
    clip.bottom = FALSE
    clip.rear = FALSE
    clip.front = FALSE
    clip.translation0 = "1 0 0"
    clip.translation1 = "-1 0 0"
    clip.translation2 = "0 1 0"
    clip.translation3 = "0 -1 0"
    clip.translation4 = "0 0 1"
    clip.translation5 = "0 0 -1"
    clip.rotation0 = "0 0 0.999999940395355 1.57079994678497"
    clip.rotation1 = "0 0 -0.999999940395355 1.57079994678497"
    clip.rotation2 = "0 0 -1 3.1415901184082"
    clip.rotation3 = "0 0 1 0"
    clip.rotation4 = "-0.999999940395355 0 0 1.57079994678497"
    clip.rotation5 = "0.999999940395355 0 0 1.57079994678497"
  }
}
module OrthoView2D {
  internal  {
    frame = "597 85 120 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "760 360 400 435"
        sizeHint = "400 435"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = OrthoView2D
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    synchronizePosition = TRUE
    layout = LAYOUT_CUBE_EQUAL
    filterMode = FILTER_LINEAR
    synchronizeZoom = TRUE
    synchronizePanning = FALSE
    useGlobalInputImage = TRUE
    snapToCenter = FALSE
    alternCubeLayout = FALSE
    timePoint = 0
    useManagedInteraction = FALSE
    enableSlicing = TRUE
    borderOn = TRUE
    borderColor = "0.899999976158142 0.899999976158142 0.899999976158142"
    grayWidth = 464491.90625
    grayCenter = 39651.83203125
    annotationOn = TRUE
    annotationSizeMode = ANNO_SHOW_DETAILED
    annotationFontSize = ANNO_SIZE_AUTO
    valueHighPrecision = TRUE
    annoCoords = Voxel
    showCurrentPos = TRUE
    worldPosition = "44.4447402954102 -147.432708740234 -276.699981689453"
    coloredMode = FALSE
  }
}
module View2D {
  internal  {
    frame = "421 85 120 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "2268 297 400 400"
        sizeHint = "400 400"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = View2D
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    view2DExtensionsOn = TRUE
    startSlice = 42
    numSlices = 1
    numXSlices = 1
    sliceStep = 1
    slab = 1
    blendMode = BLEND_REPLACE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_LINEAR
    standardKeys = TRUE
    cineMode = CINE_ZT
    cineDirection = CINE_FORWARD
    cineRepeat = CINE_ONCE
    cineSpeed = 0.1
    cineAlwaysReset = TRUE
    snapToCenter = TRUE
    zoomMode = VIEW2D_AUTO_ZOOM
    unzoomOnImageChange = FALSE
    sliceZoom = 1
    sliceZoomSynced = 1
    baseColor = "1 1 1"
    margin = "2 2"
    sliceOrigin = "0 0"
    useShaders = TRUE
    useManagedInteraction = FALSE
    lutCenter = 215.962493896484
    lutWidth = 415.606292724609
    annotationOn = TRUE
    annotationMode = ANNO_MODE_AUTO
    annotationSizeMode = ANNO_SHOW_DETAILED
    annotationCol = "0.899999976158142 0.899999976158142 0.899999976158142"
    annotationFontSize = ANNO_SIZE_AUTO
    annoCoords = Voxel
    annoCTValue = AsIs
    borderOn = FALSE
    borderColor = "0.899999976158142 0.899999976158142 0.899999976158142"
    valueHighPrecision = TRUE
    showColorChannelValues = FALSE
    colorChannelSeparator = " / "
    maxPrecision = 4
    enableSlicing = TRUE
    useRelativeLUTIfNoInputImage = TRUE
  }
}
module SoView2DOverlay {
  internal  {
    frame = "429 181 168 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "691 313 539 529"
        sizeHint = "539 529"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = SoView2DOverlay
    interactionProviderID = ""
    drawingOn = TRUE
    editingOn = TRUE
    fixZOn = TRUE
    color = "1 1 1"
    selectionTolerance = 4
    needsValidVoxel = TRUE
    button1 = IGNORED
    button2 = IGNORED
    button3 = IGNORED
    shift = IGNORED
    control = IGNORED
    alt = IGNORED
    wantsAllEvents = TRUE
    wantsKeyEvents = TRUE
    wantsMouseWheelEvents = FALSE
    setEventHandled = FALSE
    ignoreHandledEvents = FALSE
    createNewMode = FALSE
    renderOnSlab = TRUE
    clipToSlice = TRUE
    cursorShape = UNDEFINED_CURSOR
    overlayName = ""
    cacheTextures = TRUE
    blendMode = BLEND_ADD
    overwriteCurrentTimePoint = FALSE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_LINEAR
    inheritFilterMode = TRUE
    lutPrecision = VIEW2D_LUT_AUTO
    alphaFactor = 1
    baseColor = "0 0.666666686534882 1"
    useWorldCoords = TRUE
    applyLut = TRUE
    isCheckerTiling = FALSE
    checkerTileSize = 2
    areCheckerTilesInverted = FALSE
  }
}
module RunPythonScript {
  internal  {
    frame = "801 309 160 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows  {
      window _default {
        geometry = "211 376 1430 1308"
        sizeHint = "745 321"
        wasOpen = yes
      }
    }
  }
  fields  {
    instanceName = RunPythonScript
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import numpy as np
from itertools import product

# Get the image meta-data and hessian
ctx.field("GaussHessian.update").touch()
extent = ctx.field("GaussHessian.output0").size6D()
worldMatrix = ctx.field("GaussHessian.output0").voxelToWorldMatrix()
img = ctx.field("GaussHessian.output0").image()
tile = img.getTile((0, 0, 0, 0, 0, 0), extent)

# TASK: Implement blob detection
ext_x, ext_y, ext_z, ext_c, ext_t, ext_u = extent
result = np.zeros(tile.shape[:-1])

# SUBTASK 2: Find a good sigma
sigma = 30

print(tile.shape)
print(extent)

print("starting (this will take a while!)")
for u, t, c, z, y, x in product(range(ext_u), range(ext_t), range(ext_c), range(ext_z), range(ext_y), range(ext_x)):
    T = tile[u, t, c, z, y, x] 
    hessian = np.array([[T[0], T[1], T[2]], 
                     [T[1], T[3], T[4]],
                     [T[2], T[4], T[5]]])
    
    # SUBTASK 1: calculate blobness for every voxel
    det_value = np.linalg.det(hessian)
    blobness = det_value * (sigma**2)
    
    result[u, t, c, z, y, x] = blobness
    
print("finished")

# Set the calculated blobness
pi = ctx.module("Blobness").call("getInterface")
minVoxelValue = result.min()
maxVoxelValue = result.max()
pi.setImage(result, minMaxValues = (minVoxelValue, maxVoxelValue), voxelToWorldMatrix = worldMatrix)*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module PythonImage {
  internal  {
    frame = "661 229 104 56"
    moduleGroupName = ""
    windows  {
      window _default {
        geometry = "689 542 543 70"
        sizeHint = "543 70"
        wasOpen = no
      }
    }
  }
  fields  {
    instanceName = Blobness
  }
}
connections  {
  GaussHessian.input0 = LocalImage.outImage
  View3D.inImage = Blobness.output0
  OrthoView2D.image = Blobness.output0
  View2D.inImage = LocalImage.outImage
  View2D.inInvPostLUT = SoView2DOverlay.self
  SoView2DOverlay.image = Blobness.output0
}
networkModel = ""
